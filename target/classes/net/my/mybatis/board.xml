<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="net.my.maindao.BoardDao">

	<select parameterType="java.util.HashMap" resultType="net.my.main.Board" id="getBoardView">
		select board_no, profile_img, name, title, content, date_format(write_dt, '%Y-%m-%d %H:%i:%s') write_dt, cover_img, 
		<!-- left(category, 1) as category1,right(category, 1) as category2,-->
		substring_index(board.category, ',',1) as category1, 
		<!-- 해당 게시글의 카테고리1 -->
		substring_index(board.category, ',',-1) as category2, 
		<!-- 해당 게시글의 카페고리2 -->
		ccl, hits, like_count, reply_count, substring_index(board.category, ',',1) as profile_category1, 
		<!-- 작성자 프로필 카테고리1 -->
		substring_index(board.category, ',',-1) as profile_category2 
		<!-- 작성자 프로필 카테고리2 -->
		from board, member where board.member_no = member.member_no and board.board_no = #{board_no} 
	</select>
	
		<!-- 조회수 증가 -->
	<update parameterType="java.util.HashMap" id="updateHits">
		update board set hits = hits + 1 where board.board_no=#{board_no}
	</update>
	
	<!-- 해당 작가의 다른 작품들 리스트 가져오기(해당작품은 제외하기) -->
	<select parameterType="java.util.HashMap" resultType="net.my.main.BoardList" id="getOtherBoard">
		select board_no, profile_img, name, title, cover_img, board.category, hits, like_count, reply_count from board, member where board.member_no
		= member.member_noandboard.member_no = 
		(select member_no from board where board_no = #{board_no})andboard_no not in 
		(#{board_no})
	</select>
	
	<!-- 해당 게시글의 댓글 가져오기 -->
	<select parameterType="java.util.HashMap" resultType="net.my.main.BoardReply" id="getBoardReply">

		<![CDATA[
	        select
	        	reply_no,
	            board_no,
	            name,
	            profile_img,
	            content,
	            date_format(reply_dt, '%Y-%m-%d %H:%i:%s') reply_dt,
	            reply_order,
	            depth,
	            rereply_order,
	            delete_yn
	        from
	            reply
	        where
	        	board_no = #{board_no}
	        
	        order by reply_order, rereply_order
	   	]]>
	</select>
	
	<!-- 댓글 입력 -->
	<insert parameterType="java.util.HashMap" id="insertReply">
		insert into reply (board_no,name,profile_img,content,reply_order,depth,rereply_order) 
		values (#{board_no}, #{name}, #{profile_img}, #{content},
		(select max(reply_order)+1 from reply as tmp where board_no = #{board_no}),0,1)
	</insert>
	
	<!-- 답글 입력 -->
	<insert parameterType="java.util.HashMap" id="insertReReply">
		insert into reply (board_no,name,profile_img,content,reply_order,depth,rereply_order) 
		values (#{board_no}, #{name}, #{profile_img}, #{content}, #{reply_order}, 1,
		(select max(rereply_order)+1 from reply as tmp where board_no =
		#{board_no} and reply_order = #{reply_order})) 
	</insert>
	
	<!-- 댓글/답글 수정하기(delete_yn='y'로 업뎃) -->
	<update parameterType="java.util.HashMap" id="updateReply">
		update reply set content = #{content},reply_dt = now() where reply_no = #{reply_no} 
	</update>
	
	<!-- 댓글/답글 삭제하기(delete_yn='y'로 업뎃) -->
	<update parameterType="java.util.HashMap" id="deleteReply">
		update reply set delete_yn = "y"where reply_no = #{reply_no} 
	</update>
	
	<!-- 페이징 테스트 -->
	<select parameterType="java.util.HashMap" resultType="int" id="getBoardCnt">
		select count(board_no) from board 
	</select>
</mapper>